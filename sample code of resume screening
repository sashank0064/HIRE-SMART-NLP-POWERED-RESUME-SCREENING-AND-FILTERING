import os 
import re 
import docx2txt 
import PyPDF2 
SKILL_SET = { 
"python", "java", "machine learning", "data science", 
"javascript", "sql", "cloud computing" 
} 
def extract_text(file_path): 
if file_path.endswith(".pdf"): 
text = "" 
with open(file_path, "rb") as file: 
reader = PyPDF2.PdfReader(file) 
for page in reader.pages: 
page_text = page.extract_text() 
if page_text: 
text += page_text + "\n" 
return text.strip() 
elif file_path.endswith(".docx"): 
return docx2txt.process(file_path).strip() 
return "" 
def extract_skills(text): 
words = set(re.findall(r'\b\w+\b', text.lower())) 
return list(SKILL_SET.intersection(words)) 
def calculate_ats_score(resume_text, job_description): 
resume_words = set(resume_text.lower().split()) 
job_words = set(job_description.lower().split()) 
matched_keywords = resume_words & job_words 
score = round(len(matched_keywords) / len(job_words) * 100, 2) if job_words else 0 
return score, list(matched_keywords) 
def extract_experience(text): 
match = re.search(r'(\d+)\s*(years?|yrs?)\s*(of)?\s*experience', text, re.IGNORECASE) 
return int(match.group(1)) if match else 0 
def predict_salary(experience, skills): 
return 30000 + 2000 * len(skills) + 5000 * experience 
def rate_resume_format(text): 
score = 100 
if text.count("â€¢") > 20: 
score -= 10 
if "education" not in text.lower(): 
score -= 15 
if "experience" not in text.lower(): 
score -= 15 
if len(text) < 500: 
score -= 20 
return max(0, score) 
def predict_category(text): 
categories = { 
"INFORMATION-TECHNOLOGY": ["developer", "programming", "software", 
"database"], 
"ENGINEERING": ["mechanical", "civil", "electrical", "systems"], 
"FINANCE": ["investment", "banking", "auditing", "wealth"] 
} 
matches = {
cat: sum(1 for kw in kws if kw in text.lower()) 
for cat, kws in categories.items() 
} 
return max(matches, key=matches.get) if any(matches.values()) else "OTHER" 
def process_resume(file_path, job_description): 
text = extract_text(file_path) 
skills = extract_skills(text) 
ats_score, matched_keywords = calculate_ats_score(text, job_description) 
experience = extract_experience(text) 
salary = predict_salary(experience, skills) 
resume_relevance = rate_resume_format(text) 
job_category = predict_category(text) 
return { 
"filename": os.path.basename(file_path), 
"ats_score": ats_score, 
"matched_keywords": matched_keywords, 
"skills": skills, 
"experience": experience, 
"job_category": job_category, 
"salary_prediction": salary, 
"resume_relevance": resume_relevance 
}
